#include "immvision/image_navigator.h"
#include "immvision/internal/misc/immvision_to_string.h"
#include "cvnp/cvnp.h"
#include "transfer_imgui_context.h"

#include <pybind11/pybind11.h>
#include <opencv2/core.hpp>


namespace py = pybind11;


void ImageNavigator(const cv::Mat& image)
{
    transfer_imgui_context();
    cv::Size cv_size(500, 500);
    ImmVision::ImageNavigator(image, cv_size);
}



void pydef_image_navigator(pybind11::module& m)
{
    m.def("ImageNavigator", ImageNavigator);

    using namespace ImmVision;


    auto c = py::class_<ImageNavigatorParams>(m, "ImageNavigatorParams")
        .def(py::init<>())

    // <autogen:ImageNavigatorParams.attributes> // Autogenerated code below! Do not edit!


    //
    //  struct ImageNavigatorParams
    //  Stores all the display parameters and options for an ImageNavigator,
    //  (its parameters default values are reasonable choices)
    //  Its values will be updated when the user pans or zooms the image, adds watched pixels, etc.
    //
    //
    //  Display size and title
    //
    .def_readwrite("image_display_size", &ImageNavigatorParams::ImageDisplaySize, "Size of the navigator (can be different from the image size)")
    .def_readwrite("legend", &ImageNavigatorParams::Legend, "Title displayed in the border")
    //
    //  Zoom and Pan (represented by an affine transform matrix, of size 3x3)
    //
    .def_readwrite("zoom_pan_matrix", &ImageNavigatorParams::ZoomPanMatrix, "ZoomPanMatrix can be created using MakeZoomPanMatrix to create a view centered around a given point")
    .def_readwrite("zoom_key", &ImageNavigatorParams::ZoomKey, "If displaying several navigators, those with the same ZoomKey will zoom and pan together")
    //
    //  Color adjustments
    //
    .def_readwrite("color_adjustments", &ImageNavigatorParams::ColorAdjustments, "Color adjustments for float matrixes")
    .def_readwrite("color_adjustments_key", &ImageNavigatorParams::ColorAdjustmentsKey, "If displaying several navigators, those with the same ColorAdjustmentsKey will adjust together")
    //
    //  Zoom and pan with the mouse
    //
    .def_readwrite("pan_with_mouse", &ImageNavigatorParams::PanWithMouse, "")
    .def_readwrite("zoom_with_mouse_wheel", &ImageNavigatorParams::ZoomWithMouseWheel, "")
    .def_readwrite("is_color_order_bgr", &ImageNavigatorParams::IsColorOrderBGR, "Color Order: RGB or RGBA versus BGR or BGRA (Note: by default OpenCV uses BGR and BGRA)")
    //
    //  Image display options
    //
    .def_readwrite("selected_channel", &ImageNavigatorParams::SelectedChannel, "if SelectedChannel >= 0 then only this channel is displayed")
    .def_readwrite("show_alpha_channel_checkerboard", &ImageNavigatorParams::ShowAlphaChannelCheckerboard, "show a checkerboard behind transparent portions of 4 channels RGBA images")
    .def_readwrite("show_grid", &ImageNavigatorParams::ShowGrid, "Grid displayed when the zoom is high")
    .def_readwrite("draw_values_on_zoomed_pixels", &ImageNavigatorParams::DrawValuesOnZoomedPixels, "Pixel values show when the zoom is high")
    //
    //  Navigator display options
    //
    .def_readwrite("show_image_info", &ImageNavigatorParams::ShowImageInfo, "Show matrix type and size")
    .def_readwrite("show_pixel_info", &ImageNavigatorParams::ShowPixelInfo, "Show pixel values")
    .def_readwrite("show_zoom_buttons", &ImageNavigatorParams::ShowZoomButtons, "Show buttons that enable to zoom in/out (the mouse wheel also zoom)")
    .def_readwrite("show_legend_border", &ImageNavigatorParams::ShowLegendBorder, "Show a rectangular border with the legend")
    .def_readwrite("show_options", &ImageNavigatorParams::ShowOptions, "Open the options panel")
    .def_readwrite("show_options_in_tooltip", &ImageNavigatorParams::ShowOptionsInTooltip, "If set to true, then the option panel will be displayed in a transient tooltip window")
    //
    //  Watched Pixels
    //
    .def_readwrite("watched_pixels", &ImageNavigatorParams::WatchedPixels, "List of Watched Pixel coordinates")
    .def_readwrite("highlight_watched_pixels", &ImageNavigatorParams::HighlightWatchedPixels, "Shall the watched pixels be drawn on the image")
    

    //</autogen:ImageNavigatorParams.attributes> // End of autogenerated code.

    .def("__repr__", [](const ImageNavigatorParams& v){ return ToString(v); })

    ;

    //c.attr("__doc__") = ImageNavigatorParams_docstring;

}




