print("In init immvision (empty) V2")
import imgui
import cv2
from .cpp_immvision import __doc__, __version__
from .cpp_immvision import Image
from .cpp_immvision import InitGlProvider, ResetGlProvider
from . import cpp_immvision
from .cv_types import *


# <autogen:init> // Autogenerated code below! Do not edit!


class ColorAdjustmentsValues(cpp_immvision.ColorAdjustmentsValues):
    """Color adjustments (esp. useful for a float matrix)

    * factor: float = 1.
            Pre-multiply values by a Factor before displaying
    * delta: float = 0.
            Add a delta to the values before displaying

    """
    
    def __init__(
        self,
        # Pre-multiply values by a Factor before displaying
        factor: float = 1.,
        # Add a delta to the values before displaying
        delta: float = 0.,

    ):
        cpp_immvision.ColorAdjustmentsValues.__init__(self)
        self.factor = factor
        self.delta = delta



class MouseInformation(cpp_immvision.MouseInformation):
    """Contains information about the mouse inside an image

    * mouse_position: Point2d = (-1., -1.)
            Mouse position in the original image/matrix
            This position is given with float coordinates, and will be (-1., -1.) if the mouse is not hovering the image
    * mouse_position_displayed: Point = (-1, -1)
            Mouse position in the displayed portion of the image (the original image can be zoomed,
            and only show a subset if it may be shown).
            This position is given with integer coordinates, and will be (-1, -1) if the mouse is not hovering the image

 Note: you can query ImGui::IsMouseDown(mouse_button) (c++) or imgui.is_mouse_down(mouse_button) (Python)

    """
    
    def __init__(
        self,
        # Mouse position in the original image/matrix
        # This position is given with float coordinates, and will be (-1., -1.) if the mouse is not hovering the image
        mouse_position: Point2d = (-1., -1.),
        # Mouse position in the displayed portion of the image (the original image can be zoomed,
        # and only show a subset if it may be shown).
        # This position is given with integer coordinates, and will be (-1, -1) if the mouse is not hovering the image
        mouse_position_displayed: Point = (-1, -1),

    ):
        cpp_immvision.MouseInformation.__init__(self)
        self.mouse_position = mouse_position
        self.mouse_position_displayed = mouse_position_displayed



class ImageParams(cpp_immvision.ImageParams):
    """Set of display parameters and options for an Image


 ImageParams store the parameters for a displayed image
 (as well as user selected watched pixels, selected channel, etc.)
 Its default constructor will give them reasonable choices, which you can adapt to your needs.
 Its values will be updated when the user pans or zooms the image, adds watched pixels, etc.
    * refresh_image: bool = False
            Refresh Image: images textures are cached. Change this boolean value if your image matrix/buffer has changed

 Display size and title
    * image_display_size: Size = (0, 0)
            Size of the displayed image (can be different from the matrix size)
    * legend: str = "Image"
            Title displayed in the border

 Zoom and Pan (represented by an affine transform matrix, of size 3x3)
    * zoom_pan_matrix: Matx33d = np.eye(3)
            ZoomPanMatrix can be created using MakeZoomPanMatrix to create a view centered around a given point
    * zoom_key: str = ""
            If displaying several images, those with the same ZoomKey will zoom and pan together

 Color adjustments
    * color_adjustments: ColorAdjustmentsValues = ColorAdjustmentsValues()
            Color adjustments for float matrixes
    * color_adjustments_key: str = ""
            If displaying several images, those with the same ColorAdjustmentsKey will adjust together

 Zoom and pan with the mouse
    * pan_with_mouse: bool = True
    * zoom_with_mouse_wheel: bool = True
    * is_color_order_bgr: bool = True
            Color Order: RGB or RGBA versus BGR or BGRA (Note: by default OpenCV uses BGR and BGRA)

 Image display options
    * selected_channel: int = -1
            if SelectedChannel >= 0 then only this channel is displayed
    * show_alpha_channel_checkerboard: bool = True
            show a checkerboard behind transparent portions of 4 channels RGBA images
    * show_grid: bool = True
            Grid displayed when the zoom is high
    * draw_values_on_zoomed_pixels: bool = True
            Pixel values show when the zoom is high

 Image display options
    * show_image_info: bool = True
            Show matrix type and size
    * show_pixel_info: bool = True
            Show pixel values
    * show_zoom_buttons: bool = True
            Show buttons that enable to zoom in/out (the mouse wheel also zoom)
    * show_legend_border: bool = True
            Show a rectangular border with the legend
    * show_options: bool = False
            Open the options panel
    * show_options_in_tooltip: bool = False
            If set to True, then the option panel will be displayed in a transient tooltip window

 Watched Pixels
    * watched_pixels: list[Point] = list[Point]()
            List of Watched Pixel coordinates
    * highlight_watched_pixels: bool = True
            Shall the watched pixels be drawn on the image
    * mouse_info: MouseInformation = MouseInformation()
            Mouse position information. These values are filled after displaying an image

    """
    
    def __init__(
        self,
        # Refresh Image: images textures are cached. Change this boolean value if your image matrix/buffer has changed
        refresh_image: bool = False,
        # Size of the displayed image (can be different from the matrix size)
        image_display_size: Size = (0, 0),
        # Title displayed in the border
        legend: str = "Image",
        # ZoomPanMatrix can be created using MakeZoomPanMatrix to create a view centered around a given point
        zoom_pan_matrix: Matx33d = np.eye(3),
        # If displaying several images, those with the same ZoomKey will zoom and pan together
        zoom_key: str = "",
        # Color adjustments for float matrixes
        color_adjustments: ColorAdjustmentsValues = ColorAdjustmentsValues(),
        # If displaying several images, those with the same ColorAdjustmentsKey will adjust together
        color_adjustments_key: str = "",
        # 
        pan_with_mouse: bool = True,
        # 
        zoom_with_mouse_wheel: bool = True,
        # Color Order: RGB or RGBA versus BGR or BGRA (Note: by default OpenCV uses BGR and BGRA)
        is_color_order_bgr: bool = True,
        # if SelectedChannel >= 0 then only this channel is displayed
        selected_channel: int = -1,
        # show a checkerboard behind transparent portions of 4 channels RGBA images
        show_alpha_channel_checkerboard: bool = True,
        # Grid displayed when the zoom is high
        show_grid: bool = True,
        # Pixel values show when the zoom is high
        draw_values_on_zoomed_pixels: bool = True,
        # Show matrix type and size
        show_image_info: bool = True,
        # Show pixel values
        show_pixel_info: bool = True,
        # Show buttons that enable to zoom in/out (the mouse wheel also zoom)
        show_zoom_buttons: bool = True,
        # Show a rectangular border with the legend
        show_legend_border: bool = True,
        # Open the options panel
        show_options: bool = False,
        # If set to true, then the option panel will be displayed in a transient tooltip window
        show_options_in_tooltip: bool = False,
        # List of Watched Pixel coordinates
        watched_pixels: list[Point] = list[Point](),
        # Shall the watched pixels be drawn on the image
        highlight_watched_pixels: bool = True,
        # Mouse position information. These values are filled after displaying an image
        mouse_info: MouseInformation = MouseInformation(),

    ):
        cpp_immvision.ImageParams.__init__(self)
        self.refresh_image = refresh_image
        self.image_display_size = image_display_size
        self.legend = legend
        self.zoom_pan_matrix = zoom_pan_matrix
        self.zoom_key = zoom_key
        self.color_adjustments = color_adjustments
        self.color_adjustments_key = color_adjustments_key
        self.pan_with_mouse = pan_with_mouse
        self.zoom_with_mouse_wheel = zoom_with_mouse_wheel
        self.is_color_order_bgr = is_color_order_bgr
        self.selected_channel = selected_channel
        self.show_alpha_channel_checkerboard = show_alpha_channel_checkerboard
        self.show_grid = show_grid
        self.draw_values_on_zoomed_pixels = draw_values_on_zoomed_pixels
        self.show_image_info = show_image_info
        self.show_pixel_info = show_pixel_info
        self.show_zoom_buttons = show_zoom_buttons
        self.show_legend_border = show_legend_border
        self.show_options = show_options
        self.show_options_in_tooltip = show_options_in_tooltip
        self.watched_pixels = watched_pixels
        self.highlight_watched_pixels = highlight_watched_pixels
        self.mouse_info = mouse_info



# </autogen:init> // Autogenerated code end
