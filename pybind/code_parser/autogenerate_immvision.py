
import os
import sys

THIS_DIR = os.path.dirname(__file__)
sys.path.append(THIS_DIR + "/../py-mahi-gui/scripts/code_parser")
import time
import code_generator
import code_utils


REPO_DIR = os.path.realpath(THIS_DIR + "/../..")


def file_full_path(filename):
    return f"{REPO_DIR}/{filename}"


def autogenerate_immvision():
    start = time.time()

    input_header_file = "src/immvision/image.h"
    whole_header_cpp_code = code_utils.read_text_file(file_full_path(input_header_file))

    code_doc_style =  code_generator.CodeDocStyle()
    code_doc_style.flag_attribute_comment_on_line_before = True

    include_to_string = True

    #
    # Generate structs code
    #
    pydef_codes_structs = code_generator.find_pydefs_cpp(whole_header_cpp_code, code_generator.CppCodeType.STRUCT)
    generated_files_structs = [
        code_generator.AutoGeneratedFile_StructInfos(
            "pybind/src_cpp/pydef_image.cpp", "pydef_struct",
            lambda struct_infos: code_generator.generate_pydef_struct_cpp_code(struct_infos, include_to_string)),
        code_generator.AutoGeneratedFile_StructInfos(
            "pybind/src_python/immvision/__init__.py", "init_struct",
            code_generator.generate_init_struct_python_code),
        code_generator.AutoGeneratedFile_StructInfos(
            "pybind/src_python/immvision/_cpp_immvision.pyi", "pyi",
            code_generator.generate_pyi_python_code),
        code_generator.AutoGeneratedFile_StructInfos(
            "src/immvision/internal/misc/immvision_to_string.cpp", "tostring",
            code_generator.generate_tostring_cpp_code),
        code_generator.AutoGeneratedFile_StructInfos(
            "src/immvision/internal/misc/immvision_to_string.h", "tostring_decl",
            code_generator.generate_tostring_decl_h)
    ]

    for generated_file in generated_files_structs:
        generated_code = ""


        for pydef_code_struct in pydef_codes_structs:
            struct_infos = code_generator.extract_struct_infos(pydef_code_struct, code_doc_style)
            generated_code += generated_file.generator_function(struct_infos)

        code_marker_in = f"<autogen:{generated_file.generator_type}>"
        code_marker_out = f"</autogen:{generated_file.generator_type}>"
        flag_preserve_left_spaces = True
        code_utils.write_code_between_markers(
            file_full_path(generated_file.filename),
            code_marker_in,
            code_marker_out,
            generated_code,
            flag_preserve_left_spaces
        )


    #
    # Generate functions code
    #
    pydef_codes_functions = code_generator.find_pydefs_cpp(whole_header_cpp_code, code_generator.CppCodeType.FUNCTION)
    generated_files_functions = [
        code_generator.AutoGeneratedFile_FunctionsInfos("pybind/src_cpp/pydef_image.cpp", "pydef_function", code_generator.generate_pydef_function_cpp_code),
        code_generator.AutoGeneratedFile_StructInfos("pybind/src_python/immvision/__init__.py", "init_function", code_generator.generate_init_function_python_code),
    ]
    for generated_file in generated_files_functions:
        generated_code = ""

        for pydef_code_function in pydef_codes_functions:
            function_infos = code_generator.extract_function_infos(pydef_code_function)
            generated_code += generated_file.generator_function(function_infos)

        code_marker_in = f"<autogen:{generated_file.generator_type}>"
        code_marker_out = f"</autogen:{generated_file.generator_type}>"
        flag_preserve_left_spaces = True
        code_utils.write_code_between_markers(
            file_full_path(generated_file.filename),
            code_marker_in,
            code_marker_out,
            generated_code,
            flag_preserve_left_spaces
        )
    elapsed = time.time() - start
    print(f"  autogenerate_immvision (took {elapsed:.2f}s)")


if __name__ == "__main__":
    autogenerate_immvision()
