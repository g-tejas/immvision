import re
import typing
from dataclasses import dataclass

def to_snake_case(name):
    name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    name = re.sub('__([A-Z])', r'_\1', name)
    name = re.sub('([a-z0-9])([A-Z])', r'\1_\2', name)
    return name.lower()


def to_camel_case(name):
    r = ''.join(word.title() for word in name.split('_'))
    return r


@dataclass
class StringReplacement:
    replace_what: str = ""
    by_what: str = ""


def parse_string_replacement(line: str) -> StringReplacement:
    """
    Parses a string of the form
    cv::Matx33d::eye() -> np.eye(3)
    """
    items = line.split(" -> ")
    r = StringReplacement()
    r.replace_what = items[0].strip()
    r.by_what = items[1].strip()
    if r.by_what == "REMOVE":
        r.by_what = ""
    return r


def parse_string_replacements(lines: str) -> typing.List[StringReplacement]:
    lines_vec = lines.split("\n")
    lines_vec = list(lines_vec)
    lines_vec = map(lambda s: s.strip(), lines_vec)
    lines_vec = list(lines_vec)
    lines_vec = filter(lambda s: len(s) > 0, lines_vec)
    lines_vec = list(lines_vec)
    r = list( map(parse_string_replacement, lines_vec) )
    return r


def _opencv_replacements() -> typing.List[StringReplacement]:
    replacements = r"""
    \bcv::Size\(\) -> (0, 0)
    \bcv::Point\(-1, -1\) -> (-1, -1)
    \bcv::Point2d\(-1., -1.\) -> (-1., -1.)
    \bcv::Size\b -> Size
    \bcv::Matx33d::eye\(\) -> np.eye(3)
    \bcv::Matx33d\b -> Matx33d
    \bcv::Mat\b -> np.ndarray
    \bdouble\b -> float
    \bcv::Point\b -> Point
    \bcv::Point2d\b -> Point2d
    """
    return parse_string_replacements(replacements)


def _std_replacements() -> typing.List[StringReplacement]:
    replacements = r"""
    \bstd::string\(\) -> ""
    \bstd::string\b -> str
    \btrue\b -> True
    \bfalse\b -> False
    \bstd::vector<([\w:]*)> -> list[\1]
    \bconst\b -> REMOVE
    & -> REMOVE
    \* -> REMOVE
    """
    return parse_string_replacements(replacements)

def apply_one_replacement(s: str, replacement: StringReplacement):
    regex = replacement.replace_what
    subst = replacement.by_what
    r, nb = re.subn(regex, subst , s)
    return r

def apply_code_replacements(s: str) ->str:
    r = s
    for replacement in _opencv_replacements() + _std_replacements():
        r = apply_one_replacement(r, replacement)
    return r


def read_text_file(filename: str) -> str:
    with open(filename, "r") as f:
        txt = f.read()
    return txt


def escape_new_lines(code: str) -> str:
    return code.replace("\n", "\\n").replace('"', '\\"')


def write_text_file(filename: str, content: str):
    old_content = read_text_file(filename)
    if content != old_content:
        with open(filename, "w") as f:
            f.write(content)


def indent_code(code: str, indent_size: int):
    lines = code.split("\n")
    indent_str = " " * indent_size
    def indent_line(line):
        if len(line) == 0:
            return ""
        else:
            return indent_str + line
    lines = map(indent_line, lines)
    return "\n".join(lines)


def indent_code_force(code: str, indent_size: int):
    lines = code.split("\n")
    indent_str = " " * indent_size
    lines = map(lambda s: indent_str + s.strip(), lines)
    return "\n".join(lines)



def write_code_between_markers(
        inout_filename: str,
        code_marker_in: str,
        code_marker_out: str,
        code_to_insert: str,
        flag_preserve_left_spaces: bool
    ):
    input_code = read_text_file(inout_filename)
    input_code_lines = input_code.split("\n")

    output_code = ""
    is_inside_autogen_region = False
    was_replacement_performed = False
    for code_line in input_code_lines:
        if code_marker_in in code_line:
            if is_inside_autogen_region:
                raise RuntimeError(f"Encountered more than one code_marker: {code_marker_in}")
            else:
                is_inside_autogen_region = True
                was_replacement_performed = True
                indent_size = 0
                while indent_size < len(code_line) and code_line[indent_size] == " ":
                    indent_size += 1
                output_code = output_code + code_line + "\n"
                output_code = output_code + "\n"
                if flag_preserve_left_spaces:
                    output_code = output_code + code_to_insert
                else:
                    output_code = output_code + indent_code_force(code_to_insert, indent_size)
        else:
            if not is_inside_autogen_region:
                output_code = output_code + code_line + "\n"
            else:
                pass # Skip code lines that were already in the autogenerated region
        if code_marker_out in code_line:
            output_code = output_code + "\n"
            output_code = output_code + code_line + "\n"
            is_inside_autogen_region = False
    if output_code[-1:] == "\n":
        output_code = output_code[:-1]

    if not was_replacement_performed:
        raise RuntimeError(f"write_code_between_markers: could not find marker {code_marker_in} in file {inout_filename}")

    write_text_file(inout_filename, output_code)



##### Test


def test_code_replacements():
    string_replacement = StringReplacement()
    string_replacement.replace_what = r"\bcv::Size\(\)"
    string_replacement.by_what = "(0, 0)"
    s = "cv::Sizeounette cv::Size s = cv::Size()"
    r = apply_one_replacement(s, string_replacement)
    assert(r == "cv::Sizeounette cv::Size s = (0, 0)")


    replacements_str = r"""
    \bcv::Size\(\) -> (0, 0)
    """
    replacements_list = parse_string_replacements(replacements_str)
    s = "cv::Sizeounette cv::Size s = cv::Size()"
    r = apply_one_replacement(s, replacements_list[0])
    assert(r == "cv::Sizeounette cv::Size s = (0, 0)")


    replacements_str = r"""
    \bcv::Size\b -> Size
    """
    replacements_list = parse_string_replacements(replacements_str)
    s = "cv::Sizeounette cv::Size s = cv::Size()"
    r = apply_one_replacement(s, replacements_list[0])
    assert(r == "cv::Sizeounette Size s = Size()")


    s = "cv::Sizeounette cv::Size s = cv::Size()"
    r = apply_code_replacements(s)
    assert(r == "cv::Sizeounette Size s = (0, 0)")
