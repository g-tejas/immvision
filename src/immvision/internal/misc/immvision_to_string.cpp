#include "immvision/internal/misc/immvision_to_string.h"
#include "immvision/internal/misc/string_utils.h"

namespace ImmVision
{
    std::string ToString(const ColorAdjustmentsValues& params)
    {
        return "ColorAdjustmentsValues";
    }


    std::string ToString(const ImageNavigatorParams& v)
    {
        // <autogen:ImageNavigatorParams.tostring> // Autogenerated code below! Do not edit!


        
        using namespace ImmVision::StringUtils;
        
        std::string r;
        r += "ImageNavigatorParams\n";
        r += "{\n";
        
        std::string inner;
        
        //  struct ImageNavigatorParams
        //  Stores all the display parameters and options for an ImageNavigator,
        //  (its parameters default values are reasonable choices)
        //  Its values will be updated when the user pans or zooms the image, adds watched pixels, etc.
        //  Display size and title
        inner = inner + "ImageDisplaySize: " + ToString(v.ImageDisplaySize) + "\n";
        inner = inner + "Legend: " + ToString(v.Legend) + "\n";
        //  Zoom and Pan (represented by an affine transform matrix, of size 3x3)
        inner = inner + "ZoomPanMatrix: " + ToString(v.ZoomPanMatrix) + "\n";
        inner = inner + "ZoomKey: " + ToString(v.ZoomKey) + "\n";
        //  Color adjustments
        inner = inner + "ColorAdjustments: " + ToString(v.ColorAdjustments) + "\n";
        inner = inner + "ColorAdjustmentsKey: " + ToString(v.ColorAdjustmentsKey) + "\n";
        //  Zoom and pan with the mouse
        inner = inner + "PanWithMouse: " + ToString(v.PanWithMouse) + "\n";
        inner = inner + "ZoomWithMouseWheel: " + ToString(v.ZoomWithMouseWheel) + "\n";
        inner = inner + "IsColorOrderBGR: " + ToString(v.IsColorOrderBGR) + "\n";
        //  Image display options
        inner = inner + "SelectedChannel: " + ToString(v.SelectedChannel) + "\n";
        inner = inner + "ShowAlphaChannelCheckerboard: " + ToString(v.ShowAlphaChannelCheckerboard) + "\n";
        inner = inner + "ShowGrid: " + ToString(v.ShowGrid) + "\n";
        inner = inner + "DrawValuesOnZoomedPixels: " + ToString(v.DrawValuesOnZoomedPixels) + "\n";
        //  Navigator display options
        inner = inner + "ShowImageInfo: " + ToString(v.ShowImageInfo) + "\n";
        inner = inner + "ShowPixelInfo: " + ToString(v.ShowPixelInfo) + "\n";
        inner = inner + "ShowZoomButtons: " + ToString(v.ShowZoomButtons) + "\n";
        inner = inner + "ShowLegendBorder: " + ToString(v.ShowLegendBorder) + "\n";
        inner = inner + "ShowOptions: " + ToString(v.ShowOptions) + "\n";
        inner = inner + "ShowOptionsInTooltip: " + ToString(v.ShowOptionsInTooltip) + "\n";
        //  Watched Pixels
        inner = inner + "WatchedPixels: " + ToString(v.WatchedPixels) + "\n";
        inner = inner + "HighlightWatchedPixels: " + ToString(v.HighlightWatchedPixels) + "\n";
        
        r = r + IndentLines(inner, 4);
        r += "}";
        return r;
        

        // </autogen:ImageNavigatorParams.tostring> // Autogenerated code below! Do not edit!
    }

}
